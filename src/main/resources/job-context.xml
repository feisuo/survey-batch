<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath:/config.properties" />

	<import resource="context.xml" />
	<import resource="dataSource.xml" />
	<import resource="hibernate.xml" />

	<bean id="itemProcessor" class="com.mulodo.survey.batch.processor.SurveyItemProcessor" />

	<batch:job id="surveyReport">

		<!-- Defining "deacompressData" step for decompressing zip files. -->
		<!-- If this step is success, it go to "import" step. -->
		<!-- Others it will go to "reportError" step. -->
		<batch:step id="deacompressData">
			<batch:tasklet ref="deacompressTasklet" />
			<batch:next on="COMPLETED" to="importData" />
			<batch:next on="*" to="reportError" />
		</batch:step>
		<!-- After decompressing file successfully, "importData" step will import data -->
		<!-- that are reading data from cvs file and writing item into DB(Database). -->
		<!-- If state of this step is COMPLETED, it go to "backupAndReport" split.  -->
		<!-- Going to "reportError" step with others state. -->
		<batch:step id="importData">
			<batch:tasklet>
				<batch:chunk reader="multiResourceItemReader" writer="hibernatesurveyWriter"
					processor="itemProcessor" commit-interval="10" skip-limit="100"
					retry-limit="3">

					<batch:skippable-exception-classes>
						<batch:include
							class="org.springframework.batch.item.file.FlatFileParseException" />
						<batch:include class="java.io.FileNotFoundException" />
						<batch:include class="org.hibernate.exception.JDBCConnectionException" />
					</batch:skippable-exception-classes>
					<batch:retryable-exception-classes>
						<batch:include
							class="org.springframework.dao.DeadlockLoserDataAccessException" />
					</batch:retryable-exception-classes>

				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="backupAndReport" />
			<batch:next on="*" to="reportError" />
		</batch:step>
		<!--- In this "backupAndReport" split, it has 3 step for doing 3 different tasks --->
		<!--- that are "backupStep", "cleanupStep" and "reportLeader"/"reportManager". --->
		<batch:split id="backupAndReport">
			<batch:flow>
				<!--- Moving zip file(s) to backup folder --->
				<batch:step id="backupStep">
					<batch:tasklet ref="backupTasklet" />
				</batch:step>
			</batch:flow>
				
			<batch:flow>
				<!-- Cleaning cvs file(s) in input folder -->
				<batch:step id="cleanupStep">
					<batch:tasklet ref="cleanupTasklet" />
				</batch:step>
			</batch:flow>

			<batch:flow>
				<!-- The "reportLeader" step is doing about reading data from DB and sending mail to leader. -->
				<batch:step id="reportLeader" next="reportManager">
					<batch:tasklet>
						<batch:chunk reader="leaderItemReader" writer="mailItemWriter"
							processor="mailItemProcessor" commit-interval="5">
						</batch:chunk>
					</batch:tasklet>
				</batch:step>
				<!-- The "reportManager" step is doing about reading data from DB and sending mail to Manager. -->
				<batch:step id="reportManager">
					<batch:tasklet>
						<batch:chunk reader="managerItemReader" writer="mailItemWriter"
							processor="mailItemProcessor" commit-interval="5">
						</batch:chunk>
					</batch:tasklet>
				</batch:step>
			</batch:flow>
		</batch:split>
		<!-- The "reportError" step is sending mail to Administrator for reporting about error(s). -->
		<batch:step id="reportError">
			<batch:tasklet>
				<batch:chunk reader="errorItemReader" writer="mailItemWriter"
					processor="mailItemProcessor" commit-interval="5">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	<!-- declare and configure SurveyDecompressTasklet -->
	<bean id="deacompressTasklet" class="com.mulodo.survey.batch.tasklet.SurveyDecompressTasklet">
		<property name="resource" value="file:${zip_folder}" />
		<property name="targetDirectory" value="${csv_folder}" />
	</bean>
	<!-- Reading csv file(s) in csv_folder folder -->
	<bean id="multiResourceItemReader" scope="step"
		class="org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="resources" value="file:${csv_folder}/*.csv" />
		<property name="delegate" ref="cvsFileItemReader" />
	</bean>
	<!-- Declare and configure FlatFileItemReader -->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id_employee, description, s1, s2, s3" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.mulodo.survey.batch.mapper.SurveyFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>
	<!-- Defining backupTasklet bean with SurveyBackupTasklet class -->
	<bean id="backupTasklet" class="com.mulodo.survey.batch.tasklet.SurveyBackupTasklet">
		<property name="fromDirectory" value="file:${zip_folder}" />
		<property name="toDirectory" value="file:${backup_folder}" />
	</bean>

	<bean id="cleanupTasklet" class="com.mulodo.survey.batch.tasklet.SurveyCleanupTasklet">
		<property name="cleanupDirectory" value="${csv_folder}" />
	</bean>
	
	<!-- Declare hibernateItemWriter for insert/update item into database -->
	<bean id="hibernatesurveyWriter"
		class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="jdbcAbtractItemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		abstract="true">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- The "leaderItemReader" bean has inherit from "jdbcAbtractItemReader" bean -->
	<bean id="leaderItemReader" parent="jdbcAbtractItemReader">
		<property name="sql" value="${leader_sql}" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass" value="com.mulodo.survey.pojo.report.ReportLeader" />
			</bean>
		</property>
	</bean>
	<!-- The "managerItemReader" bean has inherit from "jdbcAbtractItemReader" bean -->
	<bean id="managerItemReader" parent="jdbcAbtractItemReader">
		<property name="sql" value="${manager_sql}" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass"
					value="com.mulodo.survey.pojo.report.ReportManager" />
			</bean>
		</property>
	</bean>

	<bean id="errorItemReader" parent="jdbcAbtractItemReader">
		<property name="sql" value="${error_sql}" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass" value="com.mulodo.survey.pojo.report.ReportError" />
			</bean>
		</property>
	</bean>
	<!-- Define mailItemWriter bean for writing mail -->
	<bean id="mailItemWriter"
		class="org.springframework.batch.item.mail.SimpleMailMessageItemWriter">
		<property name="mailSender" ref="mailSender" />
		<property name="mailErrorHandler" ref="loggingMailErrorHandler" />
	</bean>

	<bean id="mailItemProcessor"
		class="com.mulodo.survey.batch.processor.ReportMailItemProcessor" />

	<bean id="loggingMailErrorHandler" class="com.mulodo.survey.batch.error.TestMailErrorHandler" />
	<!-- Declare "mailSender" just to send mail -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.mail.yahoo.com" />
		<property name="port" value="587" />
		<property name="username" value="repost_survey@yahoo.com.vn" />
		<property name="password" value="matkhau123" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtps.ssl.checkserveridentity">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
			</props>
		</property>
	</bean>
</beans>